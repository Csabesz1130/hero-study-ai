// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  name          String?
  preferences   Json?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  sessions      Session[]
  progress      Progress[]
  analyticsEvents AnalyticsEvent[]
  learningStyle   LearningStyle?
  knowledgeRetention KnowledgeRetention[]
  cognitiveLoads  CognitiveLoad[]
  abTestAssignments ABTestAssignment[]
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  messages  Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])
}

model Progress {
  id        String   @id @default(cuid())
  userId    String
  sceneId   String
  data      Json
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      User     @relation(fields: [userId], references: [id])

  @@unique([userId, sceneId])
}

model ExternalResource {
  id            String    @id @default(cuid())
  title         String
  description   String
  url           String
  type          String    // video, article, simulation, etc.
  source        String    // youtube, arxiv, khan_academy, etc.
  qualityScore  Float     @default(0)
  relevanceScore Float    @default(0)
  metadata      Json?
  license       Json?
  contributions Contribution[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
}

model Contribution {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  resourceId    String
  resource      ExternalResource @relation(fields: [resourceId], references: [id])
  rating        Int
  review        String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId, resourceId])
  @@index([userId])
  @@index([resourceId])
}

model ResourceCache {
  id            String    @id @default(cuid())
  key           String    @unique
  value         Json
  ttl           Int       @default(86400) // 24 óra másodpercben
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([key])
}

model AnalyticsEvent {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  type          String    // event type (e.g., "scroll", "focus", "interaction")
  data          Json      // event-specific data
  timestamp     DateTime  @default(now())
  sessionId     String?
  metadata      Json?     // additional context
  anonymized    Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([type])
  @@index([timestamp])
}

model LearningStyle {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  style         Json      // ML model output for learning style
  confidence    Float     @default(0)
  lastUpdated   DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId])
}

model KnowledgeRetention {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  topic         String
  score         Float     @default(0)
  predictedScore Float    @default(0)
  lastAssessed  DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([userId, topic])
  @@index([userId])
  @@index([topic])
}

model CognitiveLoad {
  id            String    @id @default(cuid())
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  contentId     String
  loadScore     Float     @default(0)
  factors       Json      // contributing factors
  timestamp     DateTime  @default(now())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([userId])
  @@index([contentId])
}

model ABTest {
  id            String    @id @default(cuid())
  name          String
  description   String?
  variants      Json      // test variants configuration
  results       Json?     // test results
  startDate     DateTime
  endDate       DateTime?
  status        String    @default("active")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@index([status])
}

model ABTestAssignment {
  id            String    @id @default(cuid())
  testId        String
  test          ABTest    @relation(fields: [testId], references: [id])
  userId        String
  user          User      @relation(fields: [userId], references: [id])
  variant       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@unique([testId, userId])
  @@index([testId])
  @@index([userId])
} 